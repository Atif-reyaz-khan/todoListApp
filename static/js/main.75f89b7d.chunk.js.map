{"version":3,"sources":["features/todoSlice.js","components/Input.js","components/Todoitem.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todoList","reducers","saveTodo","state","action","push","payload","setCheck","map","item","id","done","actions","selectTodoList","todos","Input","useState","setInput","dispatch","useDispatch","className","type","value","onChange","e","target","onClick","Date","now","Todoitem","props","console","log","Checkbox","checked","color","inputProps","App","TodoList","useSelector","configureStore","reducer","todoReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAOMA,EAAYC,YAAY,CAC1BC,KAAM,QACNC,aAPiB,CACrBC,SAAS,IAOLC,SAAU,CACNC,SAAS,SAACC,EAAMC,GACZD,EAAMH,SAASK,KAAKD,EAAOE,UAG/BC,SAAS,SAACJ,EAAMC,GACRD,EAAMH,SAASQ,KAAI,SAAAC,GACZL,EAAOE,UAAUG,EAAKC,MAEN,IAAZD,EAAKE,KAEJF,EAAKE,MAAK,EAGVF,EAAKE,MAAK,U,EASAf,EAAUgB,QAAjCV,E,EAAAA,SAASK,E,EAAAA,SACXM,EAAe,SAAAV,GAAK,OAAEA,EAAMW,MAAMd,UAChCJ,IAAf,Q,eCTemB,EArBA,WAAO,IAAD,EACMC,mBAAS,IADf,mBACVD,EADU,KACJE,EADI,KAEXC,EAAUC,cAUhB,OACI,sBAAKC,UAAU,QAAf,UACI,uBAAOC,KAAK,OAAOC,MAAOP,EAAOQ,SAAU,SAAAC,GAAC,OAAEP,EAASO,EAAEC,OAAOH,UAChE,wBAAQI,QAZF,WAEdR,EAAShB,EAAS,CACVmB,KAAKN,EACLJ,MAAK,EACLD,GAAGiB,KAAKC,UAOR,sB,gBCSGC,G,MAxBE,SAACC,GAChB,IAAMhC,EAAKgC,EAAMhC,KACXa,EAAKmB,EAAMnB,KACXD,EAAGoB,EAAMpB,GACXQ,EAASC,cAMb,OADAY,QAAQC,IAAIlC,GAEV,sBAAKsB,UAAU,WAAf,UACE,cAACa,EAAA,EAAD,CACEC,QAASvB,EACTwB,MAAM,UACNZ,SAVgB,WAChBL,EAASX,EAASG,KAUlB0B,WAAY,CAAE,aAAc,wBAG9B,mBAAGhB,UAAWT,GAAS,iBAAvB,SAA0Cb,SCWjCuC,MA5Bf,WACE,IAAMC,EAASC,YAAY1B,GAE3B,OADAkB,QAAQC,IAAIM,GAEV,qBAAKlB,UAAU,MAAf,SACC,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,qBAAf,SAEQkB,EAAS9B,KAAI,SAAAC,GAAI,OACf,cAAC,EAAD,CACAX,KAAMW,EAAKY,KAEXV,KAAMF,EAAKE,KACXD,GAAID,EAAKC,UAOnB,cAAC,EAAD,UCxBQ8B,cAAe,CAC5BC,QAAS,CAEP3B,MAAO4B,KCMSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.75f89b7d.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\ntodoList:[]\n\n}\n\nconst todoSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        saveTodo:(state,action)=>{\n            state.todoList.push(action.payload);\n        },\n\n        setCheck:(state,action)=>{\n                state.todoList.map(item=>{\n                    if(action.payload===item.id)\n                    {\n                        if(item.done===true)\n                        {\n                            item.done=false;\n                        }\n                        else{\n                            item.done=true;\n                        }\n                    }\n                })\n        }\n    \n    }\n});\n\nexport const { saveTodo,setCheck }  = todoSlice.actions\nexport const selectTodoList=state=>state.todos.todoList\nexport default todoSlice.reducer","import React from 'react'\nimport {useState} from 'react'\nimport { useDispatch } from 'react-redux'\nimport {saveTodo} from '../features/todoSlice'\nimport './input.css'\n const Input = () => {\n    const [Input,setInput]=useState('')\n    const dispatch =useDispatch()\n    const addTodo=()=>{\n\n    dispatch(saveTodo({\n            type:Input,\n            done:false,\n            id:Date.now()\n        }));\n        \n    }\n    return (\n        <div className=\"input\">\n            <input type=\"text\" value={Input} onChange={e=>setInput(e.target.value)}/>\n            <button onClick={addTodo}>Add!</button>\n            \n        </div>\n    )\n    \n}\nexport default Input;\n","import React from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport \"./Todoitem.css\"\nimport {useDispatch}from \"react-redux\"\nimport {setCheck} from \"../features/todoSlice\"\nconst Todoitem = (props) => {\n  const name=props.name;\n  const done=props.done;\n  const id=props.id;\nconst dispatch=useDispatch();\n    const handleCheck = () => {\n        dispatch(setCheck(id));\n\n    };\n  console.log(name);\n  return (\n    <div className=\"todoItem\">\n      <Checkbox\n        checked={done}\n        color=\"primary\"\n        onChange={handleCheck}\n        inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n      />\n    \n      <p className={done &&  'todoItem--done'}>{name}</p>\n    </div>\n  );\n};\n\nexport default Todoitem;\n","import React from 'react';\r\nimport Input from './components/Input'\r\nimport './App.css';\r\nimport TodoItem from './components/Todoitem'\r\nimport {useSelector} from 'react-redux'\r\nimport {selectTodoList} from './features/todoSlice'\r\n\r\nfunction App() {\r\n  const TodoList=useSelector(selectTodoList)\r\n  console.log(TodoList);\r\n  return (\r\n    <div className=\"App\">\r\n     <div className=\"app__container\">\r\n       <div className=\"app__todoContainer\">\r\n         {\r\n               TodoList.map(item=>(\r\n                 <TodoItem\r\n                 name={item.type}\r\n                 \r\n                 done={item.done}\r\n                 id={item.id}\r\n                 />\r\n\r\n               ))\r\n         }\r\n   \r\n       </div>\r\n       <Input/>\r\n     </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport todoReducer from '../features/todoSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n \r\n    todos: todoReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}